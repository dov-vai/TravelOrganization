@page "/login"
@using System.Net.Http.Headers
@using System.Text
@using Microsoft.AspNetCore.Components.Authorization
@using TravelOrganization.Data.Services
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject IBasicAuthCredentials AuthCredentials
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer 

<h3>Login</h3>

<EditForm 
    Model="loginModel" 
    OnValidSubmit="HandleLogin" 
    FormName="loginForm" 
    @onsubmit:preventDefault>
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" type="email" />
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" class="form-control" @bind-Value="loginModel.Password" type="password" />
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

<div style="margin-top: 10px;">
    <a href="/register">Create an account</a>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("BasicAuthClient");
            client.BaseAddress = new Uri("http://localhost:5257/");
            var credentials = $"{loginModel.Email}:{loginModel.Password}";
            var bytes = Encoding.UTF8.GetBytes(credentials);
            var base64 = Convert.ToBase64String(bytes);
            AuthCredentials.AuthorizationHeader = $"Basic {base64}";

            var response = await client.GetAsync("api/User/profile");

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("setUserLoggedIn");
                Navigation.NavigateTo("/");
            }
            else
            {
                AuthCredentials.AuthorizationHeader = null;

                var rawResponse = await response.Content.ReadAsStringAsync();
                errorMessage = !string.IsNullOrEmpty(rawResponse) ? rawResponse : "Login failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; }
    }
}
