@page "/login"
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@using System.Text.Json            
@using System.Text
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer 

<h3>Login</h3>

<EditForm 
    Model="loginModel" 
    OnValidSubmit="HandleLogin" 
    AdditionalAttributes="@(new Dictionary<string, object> 
    { 
        { "id", "loginForm" },
        { "name", "loginForm" }
    })" FormName="loginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" type="email" />
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" class="form-control" @bind-Value="loginModel.Password" type="password" />
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

<div style="margin-top: 10px;">
    <a href="/register">Create an account</a>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var client = HttpClientFactory.CreateClient();
            client.BaseAddress = new Uri("http://localhost:5257/");
            var response = await client.PostAsJsonAsync("api/Auth/login", loginModel);

            var rawResponse = await response.Content.ReadAsStringAsync(); // Log the raw response
            Console.WriteLine($"Server Response: {rawResponse}");

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                // Attempt to deserialize the error response
                try
                {
                    var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(rawResponse);
                    errorMessage = errorResponse?.Message ?? "Login failed. Please try again.";
                }
                catch
                {
                    // Fallback if the response is not JSON
                    errorMessage = rawResponse;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }


    /// <summary>
    /// Model representing user login data with validation attributes.
    /// </summary>
    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; }
    }

    /// <summary>
    /// Model representing error responses from the server.
    /// </summary>
    public class ErrorResponse
    {
        public string Message { get; set; }
    }
}
