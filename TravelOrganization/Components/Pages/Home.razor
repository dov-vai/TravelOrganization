@page "/"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Kelionių organizavimo sistema</h1>
<div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill h-auto w-auto mt-1" aria-hidden="true"></span> Pagrindinis
            </NavLink>
        </div>


@if (isLoggedIn)
{
    <div class="nav-item px-3">
        <NavLink class="nav-link" href="profile">
            <span class="bi bi-person-fill h-auto w-auto mt-1" aria-hidden="true"></span> Profilis
        </NavLink>
    </div>
}
else
{
    <div class="nav-item px-3">
        <NavLink class="nav-link" href="login">
            <span class="bi bi-box-arrow-in-right h-auto w-auto mt-1" aria-hidden="true"></span> Prisijungimas
        </NavLink>
    </div>
}

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="routes">
                <span class="bi bi-geo-alt-fill h-auto w-auto mt-1" aria-hidden="true"></span> Maršrutai
            </NavLink>
        </div>


        <div class="nav-item px-3">
            <NavLink class="nav-link" href="routemap">
                <span class="bi bi-map-fill h-auto w-auto mt-1" aria-hidden="true"></span> Maršrutų žemėlapis
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="trip/">
                <span class="bi bi-map-fill h-auto w-auto mt-1" aria-hidden="true"></span> Rekomendacijos
            </NavLink>
        </div>
@if (isLoggedIn)
{
    <div class="nav-item px-3">
        <button class="btn btn-danger" @onclick="HandleLogout">
            <span class="bi bi-box-arrow-right h-auto w-auto mt-1" aria-hidden="true"></span> Atsijungti
        </button>
    </div>
}

        @code{
    private bool isLoggedIn;
    private bool isFirstRender = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                isLoggedIn = await JSRuntime.InvokeAsync<bool>("checkUserLoggedIn");
                isFirstRender = false;
                StateHasChanged(); // Trigger a re-render after retrieving the login status
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error checking login status: {ex.Message}");
            }
        }
    }

    private async Task HandleLogout()
    {
        try
        {
            // Call API to handle server-side logout
            var client = HttpClientFactory.CreateClient();
            client.BaseAddress = new Uri("http://localhost:5257/");
            await client.PostAsync("api/Auth/logout", null);

            // Remove "logged in" status from local storage
            await JSRuntime.InvokeVoidAsync("setUserLoggedOut");

            // Navigate to the login page
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout failed: {ex.Message}");
        }
    }
        }

        