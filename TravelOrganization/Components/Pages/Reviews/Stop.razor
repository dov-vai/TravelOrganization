@page "/Stop/{StopId:int}"
@using ApexCharts
@using TravelOrganization.Controllers
@using TravelOrganization.Data.Models.Reviews
@rendermode InteractiveServer
@inject ReviewController ReviewController

<h3 class="text-center mt-4 mb-4">Stotelės informacija</h3>

<div class="container mt-4">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Stotelės pavadinimas</h4>
            <p class="card-text"><strong>Adresas:</strong> (...)</p>
            <p class="card-text">Trumpas stotelės aprašas</p>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-md-4 pt-5 d-flex justify-content-center">
                @if (_ratingData != null)
                {
                    <ApexChart TItem="StopRatingData" Width="300" Height="200">
                        <ApexPointSeries TItem="StopRatingData"
                                         Name="Kiekis"
                                         Items="_ratingData"
                                         XValue="@(item => item.Star)"
                                         YValue="@(item => item.Count)"
                                         SeriesType="SeriesType.Area"/>
                    </ApexChart>
                }
            </div>

            <div class="col-md-8">
                <div class="d-flex justify-content-end align-items-center mt-4 mb-3">
                    <button type="button" class="btn btn-primary me-2" @onclick="ReviewController.AddReview">
                        Palikti atsiliepimą
                    </button>
                    <button type="button" class="btn btn-success me-2" @onclick="ReviewController.EditReview">
                        Redaguoti atsiliepimą
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ReviewController.DeleteReview">
                        Šalinti atsiliepimą
                    </button>
                </div>

                <h5 class="mb-0">Atsiliepimai</h5>

                @if (_reviews != null)
                {
                    @foreach (var review in _reviews)
                    {
                        var currentReviewId = review.Id;
                        <div class="card mb-3">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h6 class="card-subtitle mb-2 text-muted">@review.Name @review.Surname</h6>
                                        <small class="text-muted">Paskelbta: @review.Date</small>
                                    </div>
                                    <div>
                                        <span class="badge bg-warning text-dark">
                                            @for (var i = 0; i < review.Rating; i++)
                                            {
                                                <text>★</text>
                                            }
                                            @for (var i = review.Rating; i < 5; i++)
                                            {
                                                <text>☆</text>
                                            }
                                        </span>
                                    </div>
                                </div>
                                <p class="card-text mt-2">
                                    @review.Content
                                </p>
                                <button class="btn btn-sm btn-outline-primary"
                                        @onclick="() => GetReviewTranslation(currentReviewId!.Value)">Išversti
                                </button>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>

    <nav>
        <ul class="pagination justify-content-center mt-4">
            <li class="page-item @(_currentPage == 1 ? "disabled" : "")">
                <a class="page-link" @onclick="() => GoToPage(1)" tabindex="-1" aria-disabled="true">Pirmas</a>
            </li>

            <li class="page-item @(_currentPage == 1 ? "disabled" : "")">
                <a class="page-link" @onclick="() => GoToPage(_currentPage - 1)" tabindex="-1">‹</a>
            </li>

            @if (_currentPage > 3)
            {
                <li class="page-item">
                    <span class="page-link">...</span>
                </li>
            }

            @for (var i = Math.Max(1, _currentPage - 2); i <= Math.Min(_totalPages, _currentPage + 2); i++)
            {
                var page = i;
                <li class="page-item @(page == _currentPage ? "active" : "")">
                    <a class="page-link" @onclick="() => GoToPage(page)">@i</a>
                </li>
            }

            @if (_currentPage < _totalPages - 2)
            {
                <li class="page-item">
                    <span class="page-link">...</span>
                </li>
            }

            <li class="page-item @(_currentPage == _totalPages ? "disabled" : "")">
                <a class="page-link" @onclick="() => GoToPage(_currentPage + 1)">›</a>
            </li>

            <li class="page-item @(_currentPage == _totalPages ? "disabled" : "")">
                <a class="page-link" @onclick="() => GoToPage(_totalPages)">Paskutinis</a>
            </li>
        </ul>
    </nav>
</div>

@code {
    [Parameter] public int StopId { get; set; }

    IEnumerable<Review>? _reviews;
    int _currentPage = 1;
    int _totalPages;
    readonly int _pageSize = 10;
    List<StopRatingData>? _ratingData;

    protected override async Task OnInitializedAsync()
    {
        // TODO: check if stop id exists, if not, redirect
        _reviews = await ReviewController.GetReviews(StopId, _currentPage, _pageSize);
        _totalPages = await ReviewController.GetStopReviewPages(StopId, _pageSize);
        _ratingData = await ReviewController.GetStopRatingData(StopId);
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= _totalPages)
        {
            _currentPage = page;
            _reviews = await ReviewController.GetReviews(StopId, _currentPage, _pageSize);
        }
    }

    private async Task GetReviewTranslation(int reviewId)
    {
        // TODO: language code hard-coded, needs some selection logic?
        await ReviewController.GetReviewTranslation(reviewId, "en-US");
    }

}
