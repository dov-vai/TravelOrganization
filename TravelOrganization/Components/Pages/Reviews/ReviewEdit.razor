@page "/ReviewEdit/{ReviewId:int}"
@using TravelOrganization.Controllers
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ReviewController ReviewController

@if (_reviewForm != null)
{
    <EditForm Model="_reviewForm" OnValidSubmit="OnValidSubmit" FormName="ReviewForm">
        <AntiforgeryToken/>
        <DataAnnotationsValidator/>
        <div class="container mt-4">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Palikti atsiliepimą</h4>

                    <div class="mb-3">
                        <label for="Rating" class="form-label">Įvertinimas</label>
                        <StarRating MaxRating="5" @bind-Value="_reviewForm.Rating"/>
                        <ValidationMessage For="() => _reviewForm.Rating"></ValidationMessage>
                    </div>

                    <div class="mb-3">
                        <label for="Content" class="form-label">Jūsų atsiliepimas</label>
                        <InputTextArea @bind-Value="_reviewForm.Content" class="form-control"></InputTextArea>
                        <ValidationMessage For="() => _reviewForm.Content"></ValidationMessage>
                    </div>

                    <button type="submit" class="btn btn-primary">Pateikti</button>
                </div>
            </div>
        </div>
    </EditForm> 
}

@code {
    [Parameter] public int ReviewId { get; set; }

    Data.Models.Reviews.ReviewForm? _reviewForm;

    protected override async Task OnInitializedAsync()
    {
        // TODO: check if review belongs to user
        _reviewForm = await ReviewController.LoadReviewForm(ReviewId);
    }

    private async Task OnValidSubmit()
    {
        await ReviewController.UpdateReview(_reviewForm!);
    }

}