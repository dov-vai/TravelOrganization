@page "/ReviewForm/{StopId:int}"
@using TravelOrganization.Controllers
@rendermode InteractiveServer
@inject ReviewController ReviewController

<EditForm Model="_reviewForm" OnValidSubmit="OnValidSubmit" FormName="ReviewForm">
    <AntiforgeryToken/>
    <DataAnnotationsValidator/>
    <div class="container mt-4">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Palikti atsiliepimą</h4>

                <div class="mb-3">
                    <label for="Rating" class="form-label">Įvertinimas</label>
                    <StarRating MaxRating="5" @bind-Value="_reviewForm.Rating"/>
                    <ValidationMessage For="() => _reviewForm.Rating"></ValidationMessage>
                </div>

                <div class="mb-3">
                    <label for="Content" class="form-label">Jūsų atsiliepimas</label>
                    <InputTextArea @bind-Value="_reviewForm.Content" class="form-control"></InputTextArea>
                    <ValidationMessage For="() => _reviewForm.Content"></ValidationMessage>
                </div>

                <button type="submit" class="btn btn-primary">Pateikti</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public int StopId { get; set; }

    readonly Data.Models.Reviews.ReviewForm _reviewForm = new()
    {
        UserId = 1,
        Rating = 1,
        Content = ""
    };

    private async Task OnValidSubmit()
    {
        _reviewForm.StopId = StopId;
        await ReviewController.SubmitReview(_reviewForm);
    }

}